{"version":3,"sources":["components/Header/Header.js","context/AppReducer.js","context/GlobalState.js","components/TotalAmount/TotalAmount.js","components/IncomeExpense/IncomeExpense.js","components/TransactionList/TransactionList.js","components/Transaction/Transaction.js","components/AddTransaction/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","state","action","type","transactions","payload","transaction","balance","total","filter","id","initialState","GlobalContext","createContext","AppReducer","GlobalProvider","children","useReducer","dispatch","Provider","value","addTransaction","parseFloat","amount","deleteTransaction","TotalAmount","useContext","IncomeExpense","amounts","length","map","income","reduce","a","b","expense","Math","abs","TransactionList","props","sign","style","borderRight","onClick","description","Transaction","onDeleteTransaction","lineHeight","ind","key","AddTransaction","useState","setDescription","setAmount","onSubmit","e","preventDefault","swal","newTransaction","floor","random","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cb362c3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = () => {\r\n    return (\r\n      <p className=\"header\">Expense Tracker</p>\r\n    )\r\n  }","export default (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload.transaction, ...state.transactions],\r\n                balance: action.payload.total\r\n            }\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload.id),\r\n                balance: action.payload.total\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n    transactions: [],\r\n    balance: 0.00\r\n};\r\n\r\nexport const GlobalContext = createContext(AppReducer, initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    function addTransaction(transaction) {\r\n        let total = state.balance + parseFloat(transaction.amount);\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: {\r\n                transaction,\r\n                total\r\n            }\r\n        });\r\n    }\r\n\r\n    function deleteTransaction(id, amount) {\r\n        let total = state.balance - parseFloat(amount);\r\n        dispatch({\r\n            type: 'DELETE_TRANSACTION',\r\n            payload: {\r\n                id,\r\n                total\r\n            }\r\n        });\r\n    }\r\n\r\n    return (<GlobalContext.Provider value={{\r\n        transactions: state.transactions,\r\n        balance: state.balance,\r\n        addTransaction,\r\n        deleteTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>);\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\nexport const TotalAmount = () => {\r\n  const { balance } = useContext(GlobalContext);\r\n  return (\r\n    <div className=\"totalWrapper\">\r\n      <p className=\"totalText\">\r\n        Current Balance\r\n      </p>\r\n      <p className=\"amountText\">\r\n        ${balance}\r\n      </p>\r\n    </div>\r\n  )\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\nexport const IncomeExpense = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n  \r\n  let amounts = transactions.length && transactions.map(transaction => parseFloat(transaction.amount));\r\n  let income = amounts.length && amounts.filter(amount => amount > 0).reduce((a, b) => (a += b), 0);\r\n  let expense = amounts.length && amounts.filter(amount => amount < 0).reduce((a, b) => a -= b, 0);\r\n  \r\n  return (\r\n    <div className=\"incomeExpenseWrapper\">\r\n      <div className=\"incomeWrapper\">\r\n        <p className=\"incomeText m-1\">Income</p>\r\n        <p className=\"incomeAmountText m-1\">${income ? income : '0.00'}</p>\r\n      </div>\r\n      <div className=\"expenseWrapper\">\r\n        <p className=\"expenseText m-1\">Expense</p>\r\n        <p className=\"expenseAmountText m-1\">${expense ? Math.abs(expense) : '0.00'}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const TransactionList = (props) => {\r\n  let sign = props.transaction.amount > 0 ? '+' : '-';\r\n  return (\r\n    <div className=\"transactionWrapper\" style={props.transaction.amount > 0 ? { borderRight: '5px solid #17ce67' } : { borderRight: '5px solid #f25052' }}>\r\n      <p className=\"deleteBtn\" onClick={() => props.deleteTransaction(props.transaction.id, props.transaction.amount)}>x</p>\r\n      <p className=\"m-1\">{props.transaction.description}</p>\r\n      <p className=\"m-1\">{sign}${Math.abs(props.transaction.amount)}</p>\r\n    </div>\r\n  )\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\nimport { TransactionList } from '../TransactionList/TransactionList';\r\n\r\nexport const Transaction = () => {\r\n  const { transactions, deleteTransaction } = useContext(GlobalContext);\r\n\r\n  const onDeleteTransaction = (id, amount) => {\r\n    deleteTransaction(id, amount);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <p className=\"transactionHistoryText m-1\">Transaction History</p>\r\n      <div className=\"transactionsWrapper\" style={(!transactions.length) ? { lineHeight: 6 } : {}}>\r\n        {(transactions && transactions.length) ? transactions.map((transaction, ind) => {\r\n          return (\r\n            <TransactionList transaction={transaction} key={ind} deleteTransaction={onDeleteTransaction} />\r\n          )\r\n        })\r\n          :\r\n          <p>No History</p>}\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}","import React, { useState, useContext } from 'react';\r\nimport swal from 'sweetalert';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n  const [description, setDescription] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!description) return swal(\"Oops!\", \"Please enter description!\", \"warning\");\r\n    if (!amount) return swal(\"Oops!\", \"Please enter amount!\", \"warning\");\r\n\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 10000),\r\n      description,\r\n      amount: parseFloat(amount)\r\n    };\r\n\r\n    addTransaction(newTransaction);\r\n    setAmount('');\r\n    setDescription('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"addTransactionWrapper\">\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"descriptionWrapper\">\r\n          <label className=\"descriptionLabel\">Description</label>\r\n          <input type=\"text\" className=\"inp\" onChange={(e) => setDescription(e.target.value)} value={description} />\r\n        </div>\r\n        <div className=\"amountWrapper\">\r\n          <label className=\"amountLabel\">Transaction Amount</label>\r\n          <input type=\"number\" className=\"inp\" onChange={(e) => setAmount(e.target.value)} value={amount} />\r\n        </div>\r\n        <button className=\"addBtn\">Add transaction</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React from 'react';\n\nimport { Header } from './components/Header/Header';\nimport { TotalAmount } from './components/TotalAmount/TotalAmount';\nimport { IncomeExpense } from './components/IncomeExpense/IncomeExpense';\nimport { Transaction } from './components/Transaction/Transaction';\nimport { AddTransaction } from './components/AddTransaction/AddTransaction';\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <div className=\"App-header\">\n        <Header />\n        <TotalAmount />\n        <div className=\"bodyWrapper\">\n          <IncomeExpense />\n          <Transaction />\n          <p className=\"transactionHistoryText m-20\">Add New Transaction</p>\n          <AddTransaction />\n        </div>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}