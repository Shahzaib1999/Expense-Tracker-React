{"version":3,"sources":["components/Header/Header.js","components/TotalAmount/TotalAmount.js","components/IncomeExpense/IncomeExpense.js","components/Transaction/Transaction.js","components/AddTransaction/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TotalAmount","IncomeExpense","Transaction","props","sign","amount","style","borderRight","AddTransaction","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAEaA,G,UAAS,WAClB,OACE,uBAAGC,UAAU,UAAb,qBCFOC,EAAc,WACzB,OACE,yBAAKD,UAAU,gBACb,uBAAGA,UAAU,aAAb,mBAGA,uBAAGA,UAAU,cAAb,WCNOE,EAAgB,WAC3B,OACE,yBAAKF,UAAU,wBACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,kBAAb,UACA,uBAAGA,UAAU,wBAAb,SAEF,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,mBAAb,WACA,uBAAGA,UAAU,yBAAb,WCTKG,EAAc,SAACC,GAC1B,IAAIC,EAAOD,EAAME,OAAS,EAAI,IAAM,IACpC,OACE,yBAAKN,UAAU,qBAAqBO,MAAOH,EAAME,OAAS,EAAI,CAACE,YAAa,qBAAqB,CAACA,YAAa,sBAC3G,uBAAGR,UAAU,aAAb,KACF,uBAAGA,UAAU,OAAb,eACA,uBAAGA,UAAU,OAAOK,EAApB,SCNOI,EAAiB,SAACL,GAC7B,OACE,yBAAKJ,UAAU,yBACb,8BACI,yBAAKA,UAAU,sBACX,2BAAOA,UAAU,oBAAjB,eACA,2BAAOU,KAAK,OAAOV,UAAU,SAEjC,yBAAKA,UAAU,iBACX,2BAAOA,UAAU,eAAjB,sBACA,2BAAOU,KAAK,SAASV,UAAU,SAEnC,4BAAQA,UAAU,UAAlB,sBCcKW,MApBf,WACE,OACE,yBAAKX,UAAU,cACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,uBAAGA,UAAU,8BAAb,uBACA,yBAAKA,UAAU,uBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaM,OAAQ,KACrB,kBAAC,EAAD,OAEF,uBAAGN,UAAU,+BAAb,uBACA,kBAAC,EAAD,SCVUY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47cc15fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = () => {\r\n    return (\r\n      <p className=\"header\">Expense Tracker</p>\r\n    )\r\n  }","import React from 'react';\r\n\r\nexport const TotalAmount = () => {\r\n  return (\r\n    <div className=\"totalWrapper\">\r\n      <p className=\"totalText\">\r\n        Current Balance\r\n      </p>\r\n      <p className=\"amountText\">\r\n        $0.00\r\n      </p>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const IncomeExpense = () => {\r\n  return (\r\n    <div className=\"incomeExpenseWrapper\">\r\n      <div className=\"incomeWrapper\">\r\n        <p className=\"incomeText m-1\">Income</p>\r\n        <p className=\"incomeAmountText m-1\">$210</p>\r\n      </div>\r\n      <div className=\"expenseWrapper\">\r\n        <p className=\"expenseText m-1\">Expense</p>  \r\n        <p className=\"expenseAmountText m-1\">$160</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Transaction = (props) => {\r\n  let sign = props.amount > 0 ? '+' : '-';\r\n  return (\r\n    <div className=\"transactionWrapper\" style={props.amount > 0 ? {borderRight: '5px solid #17ce67'}:{borderRight: '5px solid #f25052'}}>\r\n        <p className=\"deleteBtn\">x</p>\r\n      <p className=\"m-1\">Description</p>\r\n      <p className=\"m-1\">{sign}$20</p>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const AddTransaction = (props) => {\r\n  return (\r\n    <div className=\"addTransactionWrapper\">\r\n      <form>\r\n          <div className=\"descriptionWrapper\">\r\n              <label className=\"descriptionLabel\">Description</label>\r\n              <input type=\"text\" className=\"inp\" />\r\n          </div>\r\n          <div className=\"amountWrapper\">\r\n              <label className=\"amountLabel\">Transaction Amount</label>\r\n              <input type=\"number\" className=\"inp\" />\r\n          </div>\r\n          <button className=\"addBtn\">Add transaction</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header/Header';\nimport { TotalAmount } from './components/TotalAmount/TotalAmount';\nimport { IncomeExpense } from './components/IncomeExpense/IncomeExpense';\nimport { Transaction } from './components/Transaction/Transaction';\nimport { AddTransaction } from './components/AddTransaction/AddTransaction';\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n        <Header />\n        <TotalAmount />\n        <div className=\"bodyWrapper\">\n          <IncomeExpense />\n          <p className=\"transactionHistoryText m-1\">Transaction History</p>\n          <div className=\"transactionsWrapper\">\n            <Transaction />\n            <Transaction amount={50} />\n            <Transaction />\n          </div>\n          <p className=\"transactionHistoryText m-20\">Add New Transaction</p>\n          <AddTransaction />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}